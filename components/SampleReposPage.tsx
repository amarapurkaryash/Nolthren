import React, { useState, useEffect } from 'react';
import ReadmeDisplay from './ReadmeDisplay';
import BarLoader from './BarLoader';

const SAMPLES = [
  {
    title: 'Awesome Project: A Modern Web App',
    description: 'This is a sample README generated for a fictional modern web application. It showcases every possible section that Nolthren can generate, demonstrating the comprehensive quality and structure of the output.',
    path: '/samples/awesome-project.md',
  },
  // More samples can be added here in the future
];

const InfoIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}>
    <circle cx="12" cy="12" r="10"></circle>
    <line x1="12" y1="16" x2="12" y2="12"></line>
    <line x1="12" y1="8" x2="12.01" y2="8"></line>
  </svg>
);


const SampleReadme: React.FC<{ title: string; description: string; path: string; }> = ({ title, description, path }) => {
  const [content, setContent] = useState('');
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchReadme = async () => {
      try {
        setIsLoading(true);
        setError(null);
        const response = await fetch(path);
        if (!response.ok) {
          throw new Error(`Failed to load sample README: ${response.statusText}`);
        }
        const text = await response.text();
        setContent(text);
      } catch (e: any) {
        setError(e.message);
      } finally {
        setIsLoading(false);
      }
    };

    fetchReadme();
  }, [path]);

  return (
    <div className="bg-white dark:bg-neutral-900 rounded-2xl shadow-sm border border-gray-200 dark:border-neutral-800 flex flex-col">
      <div className="p-6 border-b border-gray-200 dark:border-neutral-800 flex-shrink-0">
        <h3 className="font-semibold text-xl text-gray-800 dark:text-gray-100">{title}</h3>
        <p className="text-sm text-gray-600 dark:text-gray-300 mt-1">{description}</p>
      </div>
      <div>
        {isLoading && (
            <div className="flex flex-col items-center justify-center p-8 min-h-[300px]">
                <BarLoader />
                <p className="mt-6 text-gray-600 dark:text-gray-400">Loading sample...</p>
            </div>
        )}
        {error && <div className="p-6 text-red-600 dark:text-red-400">{error}</div>}
        {!isLoading && !error && <ReadmeDisplay readmeContent={content} isBare={true} />}
      </div>
    </div>
  );
};

const SampleReposPage: React.FC = () => {
    const [isNoticeVisible, setIsNoticeVisible] = useState(true);

    useEffect(() => {
        if (isNoticeVisible) {
            const timer = setTimeout(() => {
                setIsNoticeVisible(false);
            }, 10000); // Notice disappears after 10 seconds

            return () => clearTimeout(timer);
        }
    }, [isNoticeVisible]);

    return (
        <section id="samples" className="pt-24 md:pt-32 pb-16">
            <div className="text-center max-w-3xl mx-auto use-scroll-animation">
                <h1 className="text-4xl md:text-5xl font-bold text-gray-800 dark:text-gray-100 tracking-tight">Sample README</h1>
                <p className="mt-4 text-lg text-gray-600 dark:text-gray-300">
                    Explore a README generated by Nolthren. See the quality and comprehensive structure you can expect for a well-documented project.
                </p>
            </div>
            
            <div className="max-w-7xl mx-auto mt-16">
                 {/* Auto-closing notice banner */}
                 <div className={`transition-all duration-500 ease-in-out ${isNoticeVisible ? 'opacity-100 max-h-40 mb-8' : 'opacity-0 max-h-0 mb-0 invisible overflow-hidden'}`}>
                    <div className="p-4 bg-gray-100 dark:bg-neutral-900/50 border-l-4 border-gray-500 dark:border-violet-500 text-gray-800 dark:text-gray-200 rounded-lg shadow-sm flex items-start gap-3" role="alert">
                      <InfoIcon className="w-6 h-6 flex-shrink-0 text-gray-600 dark:text-violet-400 mt-0.5" />
                      <div>
                        <h3 className="font-bold">Heads up! This is a Sample README</h3>
                        <p className="text-sm">
                          This README was generated by Nolthren to showcase what's possible. This message will automatically disappear.
                        </p>
                      </div>
                    </div>
                </div>
                 
                 <div className="grid grid-cols-1 gap-12">
                     {SAMPLES.map((sample) => (
                         <div key={sample.path}>
                            <SampleReadme {...sample} />
                         </div>
                     ))}
                 </div>
            </div>
        </section>
    );
};

export default SampleReposPage;